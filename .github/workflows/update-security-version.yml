name: Update SECURITY.md with New Version

on:
  pull_request:
    paths:
      - 'lib/console_kit/version.rb'

permissions:
  contents: write
  pull-requests: write

jobs:
  update-security-md:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Get current version from version.rb
        id: version
        run: |
          VERSION_LINE=$(grep VERSION lib/console_kit/version.rb)
          VERSION=$(echo $VERSION_LINE | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update SECURITY.md
        run: |
          NEW_VERSION="${{ steps.version.outputs.version }}"
          SECURITY_FILE="SECURITY.md"

          echo "New version: $NEW_VERSION"

          # Extract all unique version entries (removing duplicates), update support status
          awk -v new_ver="$NEW_VERSION" '
            BEGIN {
              header = ""
              dash = ""
              found_header = 0
              found_dash = 0
              versions[""] = ""
            }

            # Capture header and separator
            /^|[[:space:]]*Version[[:space:]]*\|[[:space:]]*Supported[[:space:]]*\|/ {
              header = $0
              found_header = 1
              next
            }
            /^|[[:space:]]*-+/ && found_header && !found_dash {
              dash = $0
              found_dash = 1
              next
            }

            # Capture version rows
            /^\|/ && found_header && found_dash {
              gsub(/\|/, "", $0)
              split($0, cols, " ")
              version = ""
              for (i in cols) {
                if (cols[i] ~ /^[0-9]+\.[0-9]+\.[0-9]+$/) {
                  version = cols[i]
                  break
                }
              }
              if (version != "") {
                versions[version] = ":x:"
              }
              next
            }

            {
              print
            }

            END {
              # Update the latest version to be supported
              versions[new_ver] = ":white_check_mark:"

              print header
              print dash

              # Print versions in descending order (latest on top)
              n = asorti(versions, sorted_versions, "@val_num_desc")
              for (i = n; i >= 1; i--) {
                v = sorted_versions[i]
                if (v == "") continue
                status = versions[v]
                printf "| %-7s | %-18s |\n", v, status
              }
            }
          ' "$SECURITY_FILE" > tmpfile && mv tmpfile "$SECURITY_FILE"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(security): update SECURITY.md for version bump"
