name: Code Quality Check

on:
  pull_request:
    branches: [master]

permissions:
  contents: read
  pull-requests: write

jobs:
  quality:
    name: Run RSpec, Rubocop, and Reek
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.4

      - name: Install dependencies
        run: bundle install

      ########################################
      # Run RSpec and capture summary
      ########################################
      - name: Run RSpec
        id: rspec
        run: |
          bundle exec rspec --format documentation | tee rspec_result.txt

          summary_line=$(grep -E '[0-9]+ examples?, [0-9]+ failures?' rspec_result.txt | tail -n 1)

          passed=$(echo "$summary_line" | awk '{print $1}')
          failed=$(echo "$summary_line" | awk '{print $3}')
          summary=$(echo "$summary_line")

          echo "passed=${passed}" >> $GITHUB_OUTPUT
          echo "failed=${failed}" >> $GITHUB_OUTPUT
          echo "summary=${summary}" >> $GITHUB_OUTPUT

      ########################################
      # Run Rubocop and capture summary
      ########################################
      - name: Run Rubocop
        id: rubocop
        run: |
          rubo_output=$(bundle exec rubocop || true)
          echo "$rubo_output" | tee rubocop_result.txt
          summary=$(echo "$rubo_output" | grep 'files inspected')
          echo "summary=${summary}" >> $GITHUB_OUTPUT

      ########################################
      # Run Reek and capture warning summary
      ########################################
      - name: Run Reek
        id: reek
        run: |
          bundle exec reek > reek_result.txt || true

          # Extract total warnings from the 2nd last line
          total_warnings=$(tail -n 2 reek_result.txt | head -n 1 | grep -oE '[0-9]+' | head -n 1)
          total_warnings=${total_warnings:-0}

          # Count unique .rb files (headers)
          files_inspected=$(grep -oE '^[^ ]+\.rb' reek_result.txt | sort -u | wc -l | tr -d '[:space:]')
          files_inspected=${files_inspected:-0}

          # Build top offenders summary
          if [ "$total_warnings" -gt 0 ]; then
            top_offenders=$(awk '/\.rb --/ { file=$1 } /^  \[/{ count[file]++ } END { for (f in count) print count[f], f }' reek_result.txt | sort -nr | head -5)
            formatted_offenders=$(echo "$top_offenders" | awk '{print "- `" $2 "`: " $1 " warnings"}')
          else
            formatted_offenders="None 🎉"
          fi

          echo "files_inspected=${files_inspected}" >> $GITHUB_OUTPUT
          echo "total_warnings=${total_warnings}" >> $GITHUB_OUTPUT
          echo "top_offenders<<EOF" >> $GITHUB_OUTPUT
          echo "$formatted_offenders" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      ########################################
      # Post a PR comment with all summaries
      ########################################
      - name: Comment Code Quality Summary on PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ✅ **Code Quality Check Summary**

            🔍 **RSpec**  
            Success | Failure  
            ${{ steps.rspec.outputs.passed }} | ${{ steps.rspec.outputs.failed }}

            🧹 **Rubocop**  
            ${{ steps.rubocop.outputs.summary }}

            👃 **Reek**  
            ${{ steps.reek.outputs.files_inspected }} files inspected, ${{ steps.reek.outputs.total_warnings }} total warnings  
            Top offending files:  
            ${{ steps.reek.outputs.top_offenders }}
